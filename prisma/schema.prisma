// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] // 다른 객체에 연결하는 경우 그 객체가 존재하길 바란다 ...
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


model User {
  userId    Int     @id @default(autoincrement())
  email     String  @unique
  nickname  String @unique
  password  String
  profileImg String ?
  refreshToken String ?
  size Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment Comment[]
  style Style[]
}

model Product {
  productId    Int     @id @default(autoincrement())
  price Int
  nameEng String
  brand String
  nameKr String
  quickdlivery Boolean
  imgUrl String   @db.VarChar(500)
  pid String
  createdAt DateTime @default(now())
}

// model Product {
//   productId Int @id @default(autoincrement())
//   identifier String @unique
//   name String
//   price Int
//   koeanDesc String?
//   size Int?
//   releasedDate DateTime? @default(now())
//   color String?
//   likeNumber Int? @default(0)
//   brand String
//   category String?
//   gender String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Style {
  styleId Int @id @default(autoincrement())
  profileImg String
  styleImg String
  hashtag String
  like Int
  content String  
  user User @relation(fields: [userId], references: [userId],onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment Comment[]
}

model Comment {
  commentId Int   @id @default(autoincrement())
  comment String
  user User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int
  style Style     @relation(fields: [styleId], references: [styleId], onDelete: Cascade)
  styleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

